require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CustomFieldsController, type: :controller do
  login_user
  # This should return the minimal set of attributes required to create a valid
  # CustomField. As you add validations to CustomField, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) {
    attributes_for(:custom_field_textfield)
  }

  let(:invalid_attributes) {
    attributes_for(:custom_field_textfield_invalid)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CustomFieldsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all custom_fields as @custom_fields" do
      custom_field = CustomField.create! valid_attributes
      get :index, params: {}
      expect(assigns(:custom_fields)).to eq([custom_field])
    end
  end

  describe "GET #show" do
    it "assigns the requested custom_field as @custom_field" do
      custom_field = CustomField.create! valid_attributes
      get :show, id: custom_field.to_param
      expect(assigns(:custom_field)).to eq(custom_field)
    end
  end

  describe "GET #new" do
    it "assigns a new custom_field as @custom_field" do
      get :new
      expect(assigns(:custom_field)).to be_a_new(CustomField)
    end
  end

  describe "GET #edit" do
    it "assigns the requested custom_field as @custom_field" do
      custom_field = CustomField.create! valid_attributes
      get :edit,id: custom_field.to_param
      expect(assigns(:custom_field)).to eq(custom_field)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new CustomField" do
        expect {
          post :create, custom_field: valid_attributes
        }.to change(CustomField, :count).by(1)
      end

      it "assigns a newly created custom_field as @custom_field" do
        post :create, custom_field: valid_attributes
        expect(assigns(:custom_field)).to be_a(CustomField)
        expect(assigns(:custom_field)).to be_persisted
      end

      it "redirects to the created custom_field" do
        post :create, custom_field: valid_attributes
        expect(response).to redirect_to(CustomField.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved custom_field as @custom_field" do
        post :create, custom_field: invalid_attributes
        expect(assigns(:custom_field)).to be_a_new(CustomField)
      end

      it "re-renders the 'new' template" do
        post :create, custom_field: invalid_attributes
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        attributes_for(:custom_field_textarea)
      }

      it "updates the requested custom_field" do
        custom_field = CustomField.create! valid_attributes
        put :update, id: custom_field.to_param, custom_field: new_attributes
        custom_field.reload
      end

      it "assigns the requested custom_field as @custom_field" do
        custom_field = CustomField.create! valid_attributes
        put :update, id: custom_field.to_param, custom_field: valid_attributes
        expect(assigns(:custom_field)).to eq(custom_field)
      end

      it "redirects to the custom_field" do
        custom_field = CustomField.create! valid_attributes
        put :update, id: custom_field.to_param, custom_field: valid_attributes
        expect(response).to redirect_to(custom_field)
      end
    end

    context "with invalid params" do
      it "assigns the custom_field as @custom_field" do
        custom_field = CustomField.create! valid_attributes
        put :update, id: custom_field.to_param, custom_field: invalid_attributes
        expect(assigns(:custom_field)).to eq(custom_field)
      end

      it "re-renders the 'edit' template" do
        custom_field = CustomField.create! valid_attributes
        put :update, id: custom_field.to_param, custom_field: invalid_attributes
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested custom_field" do
      custom_field = CustomField.create! valid_attributes
      expect {
        delete :destroy, id: custom_field.to_param
      }.to change(CustomField, :count).by(-1)
    end

    it "redirects to the custom_fields list" do
      custom_field = CustomField.create! valid_attributes
      delete :destroy, id: custom_field.to_param
      expect(response).to redirect_to(custom_fields_url)
    end
  end

end
